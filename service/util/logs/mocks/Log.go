// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Log is an autogenerated mock type for the Log type
type Log struct {
	mock.Mock
}

// Debug provides a mock function with given fields: v
func (_m *Log) Debug(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: v
func (_m *Log) Error(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: v
func (_m *Log) Fatal(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: v
func (_m *Log) Info(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Line provides a mock function with given fields:
func (_m *Log) Line() {
	_m.Called()
}

// Panic provides a mock function with given fields: v
func (_m *Log) Panic(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Printf provides a mock function with given fields: format, v
func (_m *Log) Printf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Println provides a mock function with given fields: v
func (_m *Log) Println(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Struct provides a mock function with given fields: v
func (_m *Log) Struct(v interface{}) {
	_m.Called(v)
}

// System provides a mock function with given fields: v
func (_m *Log) System(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Warning provides a mock function with given fields: v
func (_m *Log) Warning(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewLog interface {
	mock.TestingT
	Cleanup(func())
}

// NewLog creates a new instance of Log. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLog(t mockConstructorTestingTNewLog) *Log {
	mock := &Log{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
