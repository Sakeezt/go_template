// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryRedis is an autogenerated mock type for the RepositoryRedis type
type RepositoryRedis struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx, keys
func (_m *RepositoryRedis) Clear(ctx context.Context, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *RepositoryRedis) ExpireAt(ctx context.Context, key string, tm time.Time) error {
	ret := _m.Called(ctx, key, tm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, key, tm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key, dest
func (_m *RepositoryRedis) Get(ctx context.Context, key string, dest interface{}) error {
	ret := _m.Called(ctx, key, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTTL provides a mock function with given fields: ctx, key
func (_m *RepositoryRedis) GetTTL(ctx context.Context, key string) (time.Duration, error) {
	ret := _m.Called(ctx, key)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Duration); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *RepositoryRedis) Set(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWithTTL provides a mock function with given fields: ctx, key, value, ttl
func (_m *RepositoryRedis) SetWithTTL(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositoryRedis interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryRedis creates a new instance of RepositoryRedis. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryRedis(t mockConstructorTestingTNewRepositoryRedis) *RepositoryRedis {
	mock := &RepositoryRedis{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
