// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	carbon "github.com/uniplaces/carbon"
)

// DateTime is an autogenerated mock type for the DateTime type
type DateTime struct {
	mock.Mock
}

// ConvertUnixToDateTime provides a mock function with given fields: unix
func (_m *DateTime) ConvertUnixToDateTime(unix int64) string {
	ret := _m.Called(unix)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(unix)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConvertUnixToDateTimeWithFormat provides a mock function with given fields: unix, format
func (_m *DateTime) ConvertUnixToDateTimeWithFormat(unix int64, format string) string {
	ret := _m.Called(unix, format)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64, string) string); ok {
		r0 = rf(unix, format)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNow provides a mock function with given fields:
func (_m *DateTime) GetNow() *carbon.Carbon {
	ret := _m.Called()

	var r0 *carbon.Carbon
	if rf, ok := ret.Get(0).(func() *carbon.Carbon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carbon.Carbon)
		}
	}

	return r0
}

// GetUnixNow provides a mock function with given fields:
func (_m *DateTime) GetUnixNow() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

type mockConstructorTestingTNewDateTime interface {
	mock.TestingT
	Cleanup(func())
}

// NewDateTime creates a new instance of DateTime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDateTime(t mockConstructorTestingTNewDateTime) *DateTime {
	mock := &DateTime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
