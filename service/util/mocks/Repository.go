// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-template/domain"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, pipeline, page, perPage, itemType
func (_m *Repository) Aggregate(ctx context.Context, pipeline mongo.Pipeline, page int, perPage int, itemType interface{}) (int, []interface{}, error) {
	ret := _m.Called(ctx, pipeline, page, perPage, itemType)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, mongo.Pipeline, int, int, interface{}) int); ok {
		r0 = rf(ctx, pipeline, page, perPage, itemType)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []interface{}
	if rf, ok := ret.Get(1).(func(context.Context, mongo.Pipeline, int, int, interface{}) []interface{}); ok {
		r1 = rf(ctx, pipeline, page, perPage, itemType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, mongo.Pipeline, int, int, interface{}) error); ok {
		r2 = rf(ctx, pipeline, page, perPage, itemType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClearArray provides a mock function with given fields: ctx, param
func (_m *Repository) ClearArray(ctx context.Context, param *domain.SetOpParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SetOpParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx, filters
func (_m *Repository) Count(ctx context.Context, filters []string) (int, error) {
	ret := _m.Called(ctx, filters)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, []string) int); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountArray provides a mock function with given fields: ctx, param
func (_m *Repository) CountArray(ctx context.Context, param *domain.SetOpParam) (int, error) {
	ret := _m.Called(ctx, param)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SetOpParam) int); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SetOpParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, ent
func (_m *Repository) Create(ctx context.Context, ent interface{}) (string, error) {
	ret := _m.Called(ctx, ent)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) string); ok {
		r0 = rf(ctx, ent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, ent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, filters
func (_m *Repository) Delete(ctx context.Context, filters []string) error {
	ret := _m.Called(ctx, filters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, opt, itemType
func (_m *Repository) Find(ctx context.Context, opt *domain.QueryOption, itemType interface{}) (int, []interface{}, error) {
	ret := _m.Called(ctx, opt, itemType)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.QueryOption, interface{}) int); ok {
		r0 = rf(ctx, opt, itemType)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []interface{}
	if rf, ok := ret.Get(1).(func(context.Context, *domain.QueryOption, interface{}) []interface{}); ok {
		r1 = rf(ctx, opt, itemType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *domain.QueryOption, interface{}) error); ok {
		r2 = rf(ctx, opt, itemType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsFirst provides a mock function with given fields: ctx, param
func (_m *Repository) IsFirst(ctx context.Context, param *domain.SetOpParam) (bool, error) {
	ret := _m.Called(ctx, param)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SetOpParam) bool); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SetOpParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opt, itemType
func (_m *Repository) List(ctx context.Context, opt *domain.PageOption, itemType interface{}) (int, []interface{}, error) {
	ret := _m.Called(ctx, opt, itemType)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PageOption, interface{}) int); ok {
		r0 = rf(ctx, opt, itemType)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []interface{}
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PageOption, interface{}) []interface{}); ok {
		r1 = rf(ctx, opt, itemType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *domain.PageOption, interface{}) error); ok {
		r2 = rf(ctx, opt, itemType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Pop provides a mock function with given fields: ctx, param
func (_m *Repository) Pop(ctx context.Context, param *domain.SetOpParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SetOpParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields: ctx, param
func (_m *Repository) Push(ctx context.Context, param *domain.SetOpParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SetOpParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, filters, out
func (_m *Repository) Read(ctx context.Context, filters []string, out interface{}) error {
	ret := _m.Called(ctx, filters, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, filters, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDelete provides a mock function with given fields: ctx, filters
func (_m *Repository) SoftDelete(ctx context.Context, filters []string) error {
	ret := _m.Called(ctx, filters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, filters, ent
func (_m *Repository) Update(ctx context.Context, filters []string, ent interface{}) error {
	ret := _m.Called(ctx, filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithBson provides a mock function with given fields: ctx, filters, data
func (_m *Repository) UpdateWithBson(ctx context.Context, filters []string, data primitive.M) error {
	ret := _m.Called(ctx, filters, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, primitive.M) error); ok {
		r0 = rf(ctx, filters, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
