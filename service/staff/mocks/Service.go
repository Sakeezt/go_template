// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-template/domain"

	inout "go-template/service/staff/inout"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *Service) Create(ctx context.Context, input *inout.StaffCreateInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *inout.StaffCreateInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.StaffCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Service) Delete(ctx context.Context, input *inout.StaffDeleteInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.StaffDeleteInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, opt
func (_m *Service) List(ctx context.Context, opt *domain.PageOption) (int, []*inout.StaffView, error) {
	ret := _m.Called(ctx, opt)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PageOption) int); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*inout.StaffView
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PageOption) []*inout.StaffView); ok {
		r1 = rf(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*inout.StaffView)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *domain.PageOption) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Read provides a mock function with given fields: ctx, input
func (_m *Service) Read(ctx context.Context, input *inout.StaffReadInput) (*inout.StaffView, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.StaffView
	if rf, ok := ret.Get(0).(func(context.Context, *inout.StaffReadInput) *inout.StaffView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.StaffView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.StaffReadInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Service) Update(ctx context.Context, input *inout.StaffUpdateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.StaffUpdateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
